# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15X4ojDanrl92V46_jxbdsZxwSGRY3Wbv

# New Section
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

# %matplotlib inline

#read_csv is a pandas function to read csv files

data = pd.read_csv('Admission_Predict.csv')

data.info()

data.isnull().any()

#let us rename the column change of admit because it has training space
data=data.rename(columns={'change of admit':'change of admit'})

data.describe()

sns.distplot(data['GRE Score'])

sns.pairplot(data=data,hue='Research',markers=["^","v"],palette='inferno')

sns.scatterplot(x='University Rating',y='CGPA',data=data,color='Red',s=100)

category=['GRE score','TOEFL score','University Rating','SOP','LOR','CGPA','Research','change of Admit']
color=['yellowgreen','gold','lightskybiue','pink','red','purple','orange','gray']
start= True
for i in np.arange(4):
  fig=plt.figure(figuresize=14,8))
  plt.subplot2grid((4,2),(i,0))

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler()
X=sc.fit_transform(X)
x

x=data.iloc[:,0:7].values
x

y=data.iloc[:,7:].values
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.30, random_state=101)
 #random_state acts as the seed for the random number generator during the split

y_train=(y_train>0.5)

y_train

y_test=(y_test>0.5)

from sklearn.linear_model.logistic import LogisticRegression

cls =LogisticRegression (random_state =0)

lr=cls.fit(x_train, y_train)

#libraries to train neural network
import tensorflow as tf

from tensorflow import keras

from tensorflow.keras.layers import Dense, Activation, Dropout 

from tensorflow.keras.optimizers import Adam

# Initialize the model
model keras.Sequential()

# Add input Layer
model.add(Dense (7, activation = 'relu',input_dim=7))

# Add hidden layers
model.add(Dense(7, activation='relu'))

# Add output Layer
model.add(Dense(1,activation="linear"))

model.summary()

model:"sequntial"

Model.summary()

model.fit(x_train,y_train,batch_size=20,epochs=100)